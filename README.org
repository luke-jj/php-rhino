* PHP Rhino
Rhino is a php micro-framework for building fast and reliable http services, 
APIs, and to serve static content through an easy to configure php based 
routing service.

** Contents
   
1. Quick Start
2. Feature Tutorials
3. Installation
4. API Documentation

** Quick Start
To get started quickly simply require or include one of the =rhino.php= files 
located in the base or lib/ folder of this framework in the =index.php= file
of your application.

You can then call the exported =rhino()= function to instantiate this 
framework's main application and assign the return to a variable - 
conventionally named =$app=.
  
Next use instance methods of the application object to register middleware and
routehandler. =use()= registers a middleware with this application while
methods like =get()=, =post()= and =delete()= register route handlers which
result in a final http response to the client. 

Finally a call to the =start()= method must be made after all components have
been registered on the application object.

#+BEGIN_SRC php
<?php

require_once (dirname(__FILE__) . "/lib/rhino.php");

$app = rhino();

$app->use($jsonparse);

$app->post('/', function($req, $res) {
  $name = $req->body['name'];
  $res->send("Hello $name");
});

$app->get('/', function($req, $res) {
  $res->send("Hello, World!");
});

$app->get('/:name', function($req, $res) {
  $res->send("Hello " . $req->params['name']);
});

$app->start();
#+END_SRC

To immediately test your application open a terminal in the root folder of your
application and launch a php development server by entering: 
#+BEGIN_SRC
php -S localhost:5001 .
#+END_SRC
Open your favorite browser and navigate to =localhost:5001/Peter= to view the
results. If you want to test the registered *POST* route as well you can use an
external graphical tool like /Postman/ or simply use cURL from the terminal 
with the following command:
#+BEGIN_SRC
echo '{ "name": "Charlie" }' | curl -d @- http://localhost:5001/ --header "Content-Type:application/json"
#+END_SRC

Take a look in the =examples/= folder for more advanced working prototype 
applications.

** Feature Tutorials
*** Regular Expressions In Resource Routes
Most regular expressions work with route handlers.

#+BEGIN_SRC php
<?php

// trigger this route handler as a middleware for all routes starting
// with `/api/`.
$app->use('/api/*', function($req, $res) {
});

// trigger this route handler for any number entered after `/api/`
$app->get('/api/[0-9]+', function($req, $res) {
});

$app->get('/api/*/name/[A-Za-z ]+', function($req, $res) {
});
#+END_SRC

*** Query Parameters
Query Parameters are automatically converted to key-value pairs and
stored in the =query= property of the request object.

#+BEGIN_SRC php
<?php

$app->get('/', function($req, $res) {
  $orderBy = $req->query['orderBy'];
  $offset = $req->query['offset'];
  $limit = $req->query['limit'];
});
#+END_SRC

*** Route Parameters
Route parameters are defined with a colon =:= in the resource route.
Route parameters and strings entered by the client in place of the
route parameters are converted to key - value pairs and stored in the
=params= property of the request object.

#+BEGIN_SRC php
<?php

$app->get('/api/users/:id', function($req, $res) {
  $res->send("Retrieving data for user with id: {$req->params['id']}");
});

$app->get('/api/users/:lastname/:firstname', function($req, $res) {
  $lastName = $req->params['lastname'];
  $firstName = $req->params['firstname'];

  $res->send("Loading data for $firstName $lastName");
}
#+END_SRC

*** Secondary Routers
Additional routers can be instantiated from the original Application
=$app= instance. These routers hold most of the same methods that the
Application instance has. Secondary routers can be mounted on a
custom path on other routers or the main application.

Secondary routers are used to segment different resources into their own files 
and to later mount them on a common url resouce path.

#+BEGIN_SRC php
// in users.php
$router = $app->router();

$router->get('/', function($req, $res) {
  // do stuff
});

$router->get('/:id', function($req, $res) {
  // do stuff
});

// in index.php
require_once (dirname(__file__) . '/routes/users.php');

$app->use('/api/users/', $router);

// routes registered on $router are now available on /api/users/...
#+END_SRC

*** Middleware
Middleware is functionality that is executed as part of the
request-response cycle.  The =use()= method registers middleware
functions on a given path. Those middleware functions are defined like
regular route handlers but do not automatically terminate the request
response cycle after they are finished executing.

#+BEGIN_SRC php
<?php 
// this middleware is used to check whether the client has the required 
// authentication and is executed on all routes of the 'users' resource.

$app->use('/api/users/*', function($req, $res) {
  if (!$req->get('X-Token')) {
    $res->status(401)->send('Access denied. No token provided.');
    $res->end();
  }
  
  // authenticate some more
});
#+END_SRC


*** Built-In Request Validation
To use the built-in validator you must import
=/lib/addons/validation.php= in your main /index.php/ file.
   
** Installation
The recommended way of installing this framework is placing the =lib/= folder
in the root or =vendor/= folder of your project and then requiring the main
=rhino.php= file in your app's main index.php file. That's it - you are ready 
to go.

#+BEGIN_SRC php
<?php

require_once (dirname(__FILE__) . "/lib/rhino.php");
#+END_SRC

** API Documentation

- rhino()
- Application
  - router()
  - start()
- Router
  - get()
  - post()
  - put()
  - delete()
  - all()
  - use()
- Request
  - app
  - headers
  - get()
  - body
  - params
  - queryString
  - query
  - originalUrl
  - url
  - method
  - hostname
  - port
- Response
  - app
  - set()
  - send()
  - json()
  - end()
  - status()
  - sendStatus()
  - type()

$jsonparse


*** rhino()
*** Application
*** Router
*** Request
*** Response
**** json($body)
Automatically convert an object, array or map to a json formatted string,
set the 'Content-Type' http header to 'application/json' and write the 
string to the http response stream.

@param $body object - object, array or map
@return Response - a reference to this Response object to allow chaining.

